{"version":3,"sources":["webpack://ReactPanelGroup/webpack/universalModuleDefinition","webpack://ReactPanelGroup/webpack/bootstrap","webpack://ReactPanelGroup/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://ReactPanelGroup/./src/Panel.js","webpack://ReactPanelGroup/./src/Divider.js","webpack://ReactPanelGroup/./src/PanelGroup.js","webpack://ReactPanelGroup/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Panel","onResizeObjectLoad","_this","refs","resizeObject","contentDocument","defaultView","addEventListener","calculateStretchWidth","onNextFrame","callback","setTimeout","requestAnimationFrame","props","onWindowResize","rect","node","getBoundingClientRect","panelID","x","width","y","height","undefined","parentElement","componentDidMount","_this2","this","resize","data","createResizeObject","external_root_React_commonjs2_react_commonjs_react_amd_react_default","a","createElement","aria-label","style","position","top","left","zIndex","opacity","ref","type","render","_this3","className","children","React","Component","defaultProps","Divider","Divider_classCallCheck","_len","arguments","length","args","Array","_key","Divider_possibleConstructorReturn","_React$Component","apply","concat","handleDragStart","e","setState","dragging","initPos","stopPropagation","preventDefault","handleDragEnd","handleDragMove","state","initDelta","flowMask","direction","flowDelta","resultDelta","handleResize","expectedDelta","onMouseDown","button","pageX","pageY","onMouseMove","onTouchStart","touches","clientX","clientY","onTouchMove","delta","getHandleWidth","dividerWidth","handleBleed","getHandleOffset","componentDidUpdate","document","passive","onResizeStart","removeEventListener","onResizeEnd","divider","minWidth","maxWidth","minHeight","maxHeight","flexGrow","handle","backgroundColor","showHandles","cursor","assign","borderColor","PanelGroup","PanelGroup_classCallCheck","PanelGroup_possibleConstructorReturn","defaultResize","index","panelWidths","size","loadPanels","panels","stretchIncluded","Children","toArray","widthObj","minSize","maxSize","snap","getPanelClass","push","onUpdate","slice","getSizeDirection","caps","tempPanels","returnDelta","resizePanel","panelIndex","masterSize","iti","boundingRect","boundingSize","spacing","Math","abs","minsize","maxsize","getPanelMinSize","getPanelMaxSize","fixedSize","getPanelGroupMinSize","getPanelGroupMaxSize","setPanelSize","map","panel","PanelGroup_extends","diff","available","cut","min","componentWillReceiveProps","nextProps","nextPanels","getStyle","_container","container","display","flexDirection","getPanelStyle","_extends2","_props","panelColor","newPanelStyle","flexShrink","overflow","createPanelProps","panelStyle","_ref","initialChildren","panelState","metadata","isFirst","isLast","key","createPanel","_ref2","Klass","maybeDivide","_ref3","newChildren","Divider_Divider","newPanel","__webpack_exports__","Panel_Panel"],"mappings":"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","file":"react-panelgroup.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactPanelGroup\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactPanelGroup\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Panel extends React.Component {\r\n  static propTypes = {\r\n    resize: PropTypes.string,\r\n    onWindowResize: PropTypes.func,\r\n    panelID: PropTypes.number.isRequired,\r\n    style: PropTypes.object.isRequired,\r\n    children: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired\r\n  };\r\n\r\n  static defaultProps = {\r\n    resize: undefined,\r\n    onWindowResize: undefined\r\n  };\r\n  // Find the resizeObject if it has one\r\n  componentDidMount() {\r\n    if (this.props.resize === 'stretch') {\r\n      this.refs.resizeObject.addEventListener('load', () => this.onResizeObjectLoad());\r\n      this.refs.resizeObject.data = 'about:blank';\r\n      this.calculateStretchWidth(); // this.onNextFrame(this.calculateStretchWidth);\r\n    }\r\n  }\r\n\r\n  // Attach resize event listener to resizeObject\r\n  onResizeObjectLoad = () => {\r\n    this.refs.resizeObject.contentDocument.defaultView.addEventListener('resize', () =>\r\n      this.calculateStretchWidth()\r\n    );\r\n  };\r\n\r\n  // Utility function to wait for next render before executing a function\r\n  onNextFrame = (callback) => {\r\n    setTimeout(() => {\r\n      window.requestAnimationFrame(callback);\r\n    }, 0);\r\n  };\r\n\r\n  // Recalculate the stretchy panel if it's container has been resized\r\n  calculateStretchWidth = () => {\r\n    if (this.props.onWindowResize !== null) {\r\n      const rect = this.node.getBoundingClientRect();\r\n\r\n      this.props.onWindowResize(\r\n        this.props.panelID,\r\n        { x: rect.width, y: rect.height },\r\n        undefined,\r\n        this.node.parentElement\r\n        // recalcalculate again if the width is below minimum\r\n        // Kinda hacky, but for large resizes like fullscreen/Restore\r\n        // it can't solve it in one pass.\r\n        // function() {this.onNextFrame(this.calculateStretchWidth)}.bind(this)\r\n      );\r\n    }\r\n  };\r\n\r\n  createResizeObject() {\r\n    const style = {\r\n      resizeObject: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -1,\r\n        opacity: 0\r\n      }\r\n    };\r\n\r\n    // only attach resize object if panel is stretchy.  Others dont need it\r\n    return this.props.resize === 'stretch' ? (\r\n      <object aria-label=\"panel\" style={style.resizeObject} ref=\"resizeObject\" type=\"text/html\" />\r\n    ) : null;\r\n  }\r\n\r\n  // Render component\r\n  render() {\r\n    const resizeObject = this.createResizeObject();\r\n\r\n    return (\r\n      <div\r\n        ref={(node) => {\r\n          this.node = node;\r\n        }}\r\n        className=\"panelWrapper\"\r\n        style={this.props.style}\r\n      >\r\n        {resizeObject}\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Divider extends React.Component {\r\n  static propTypes = {\r\n    dividerWidth: PropTypes.number,\r\n    handleBleed: PropTypes.number,\r\n    direction: PropTypes.string,\r\n    panelID: PropTypes.number.isRequired,\r\n    handleResize: PropTypes.func.isRequired,\r\n    showHandles: PropTypes.bool,\r\n    borderColor: PropTypes.string,\r\n    onResizeStart: PropTypes.func,\r\n    onResizeEnd: PropTypes.func\r\n  };\r\n\r\n  static defaultProps = {\r\n    dividerWidth: 1,\r\n    handleBleed: 4,\r\n    direction: undefined,\r\n    showHandles: false,\r\n    borderColor: undefined,\r\n    onResizeStart: undefined,\r\n    onResizeEnd: undefined\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = {\r\n      dragging: false,\r\n      initPos: { x: null, y: null }\r\n    };\r\n  }\r\n\r\n  // Add/remove event listeners based on drag state\r\n  componentDidUpdate(props, state) {\r\n    if (this.state.dragging && !state.dragging) {\r\n      document.addEventListener('mousemove', this.onMouseMove);\r\n      document.addEventListener('touchmove', this.onTouchMove, {\r\n        passive: false\r\n      });\r\n      document.addEventListener('mouseup', this.handleDragEnd);\r\n      document.addEventListener('touchend', this.handleDragEnd, {\r\n        passive: false\r\n      });\r\n      // maybe move it to setState callback ?\r\n      this.props.onResizeStart();\r\n    } else if (!this.state.dragging && state.dragging) {\r\n      document.removeEventListener('mousemove', this.onMouseMove);\r\n      document.removeEventListener('touchmove', this.onTouchMove, {\r\n        passive: false\r\n      });\r\n      document.removeEventListener('mouseup', this.handleDragEnd);\r\n      document.removeEventListener('touchend', this.handleDragEnd, {\r\n        passive: false\r\n      });\r\n      this.props.onResizeEnd();\r\n    }\r\n  }\r\n\r\n  // Start drag state and set initial position\r\n  handleDragStart = (e, x, y) => {\r\n    this.setState({\r\n      dragging: true,\r\n      initPos: {\r\n        x,\r\n        y\r\n      }\r\n    });\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  };\r\n\r\n  // End drag state\r\n  handleDragEnd = (e) => {\r\n    this.setState({ dragging: false });\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  };\r\n\r\n  // Call resize handler if we're dragging\r\n  handleDragMove = (e, x, y) => {\r\n    if (!this.state.dragging) return;\r\n\r\n    const initDelta = {\r\n      x: x - this.state.initPos.x,\r\n      y: y - this.state.initPos.y\r\n    };\r\n\r\n    const flowMask = {\r\n      x: this.props.direction === 'row' ? 1 : 0,\r\n      y: this.props.direction === 'column' ? 1 : 0\r\n    };\r\n\r\n    const flowDelta = initDelta.x * flowMask.x + initDelta.y * flowMask.y;\r\n\r\n    // Resize the panels\r\n    const resultDelta = this.handleResize(this.props.panelID, initDelta);\r\n\r\n    // if the divider moved, reset the initPos\r\n    if (resultDelta + flowDelta !== 0) {\r\n      // Did we move the expected amount? (snapping will result in a larger delta)\r\n      const expectedDelta = resultDelta === flowDelta;\r\n\r\n      this.setState({\r\n        initPos: {\r\n          // if we moved more than expected, add the difference to the Position\r\n          x: x + (expectedDelta ? 0 : resultDelta * flowMask.x),\r\n          y: y + (expectedDelta ? 0 : resultDelta * flowMask.y)\r\n        }\r\n      });\r\n    }\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  };\r\n\r\n  // Call resize on mouse events\r\n  // Event onMosueDown\r\n  onMouseDown = (e) => {\r\n    // only left mouse button\r\n    if (e.button !== 0) return;\r\n    this.handleDragStart(e, e.pageX, e.pageY);\r\n  };\r\n  // Event onMouseMove\r\n  onMouseMove = (e) => {\r\n    this.handleDragMove(e, e.pageX, e.pageY);\r\n  };\r\n\r\n  // Call resize on Touch events (mobile)\r\n  // Event ontouchstart\r\n  onTouchStart = (e) => {\r\n    this.handleDragStart(e, e.touches[0].clientX, e.touches[0].clientY);\r\n  };\r\n\r\n  // Event ontouchmove\r\n  onTouchMove = (e) => {\r\n    this.handleDragMove(e, e.touches[0].clientX, e.touches[0].clientY);\r\n  };\r\n\r\n  // Handle resizing\r\n  handleResize = (i, delta) => this.props.handleResize(i, delta);\r\n\r\n  // Utility functions for handle size provided how much bleed\r\n  // we want outside of the actual divider div\r\n  getHandleWidth = () => this.props.dividerWidth + this.props.handleBleed * 2;\r\n  getHandleOffset = () => this.props.dividerWidth / 2 - this.getHandleWidth() / 2;\r\n\r\n  // Render component\r\n  render() {\r\n    const style = {\r\n      divider: {\r\n        width: this.props.direction === 'row' ? this.props.dividerWidth : 'auto',\r\n        minWidth: this.props.direction === 'row' ? this.props.dividerWidth : 'auto',\r\n        maxWidth: this.props.direction === 'row' ? this.props.dividerWidth : 'auto',\r\n        height: this.props.direction === 'column' ? this.props.dividerWidth : 'auto',\r\n        minHeight: this.props.direction === 'column' ? this.props.dividerWidth : 'auto',\r\n        maxHeight: this.props.direction === 'column' ? this.props.dividerWidth : 'auto',\r\n        flexGrow: 0,\r\n        position: 'relative'\r\n      },\r\n      handle: {\r\n        position: 'absolute',\r\n        width: this.props.direction === 'row' ? this.getHandleWidth() : '100%',\r\n        height: this.props.direction === 'column' ? this.getHandleWidth() : '100%',\r\n        left: this.props.direction === 'row' ? this.getHandleOffset() : 0,\r\n        top: this.props.direction === 'column' ? this.getHandleOffset() : 0,\r\n        backgroundColor: this.props.showHandles ? 'rgba(0,128,255,0.25)' : 'auto',\r\n        cursor: this.props.direction === 'row' ? 'col-resize' : 'row-resize',\r\n        zIndex: 100\r\n      }\r\n    };\r\n    Object.assign(style.divider, { backgroundColor: this.props.borderColor });\r\n\r\n    // Add custom class if dragging\r\n    let className = 'divider';\r\n    if (this.state.dragging) {\r\n      className += ' dragging';\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className={className}\r\n        style={style.divider}\r\n        onMouseDown={this.onMouseDown}\r\n        onTouchStart={this.onTouchStart}\r\n      >\r\n        <div style={style.handle} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Panel from './Panel';\r\nimport Divider from './Divider';\r\n\r\nexport { Divider, Panel };\r\n\r\nexport default class PanelGroup extends React.Component {\r\n  static defaultProps = {\r\n    spacing: 1,\r\n    direction: 'row',\r\n    panelWidths: [],\r\n    onUpdate: undefined,\r\n    onResizeStart: undefined,\r\n    onResizeEnd: undefined,\r\n    panelColor: undefined,\r\n    borderColor: undefined,\r\n    showHandles: false\r\n  };\r\n\r\n  static propTypes = {\r\n    spacing: PropTypes.number,\r\n    direction: PropTypes.string,\r\n    panelWidths: PropTypes.array,\r\n    children: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\r\n    onUpdate: PropTypes.func,\r\n    onResizeStart: PropTypes.func,\r\n    onResizeEnd: PropTypes.func,\r\n    panelColor: PropTypes.string,\r\n    borderColor: PropTypes.string,\r\n    showHandles: PropTypes.bool\r\n  };\r\n  // Load initial panel configuration from props\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = this.loadPanels(this.props);\r\n  }\r\n\r\n  // reload panel configuration if props update\r\n  componentWillReceiveProps(nextProps) {\r\n    const nextPanels = nextProps.panelWidths;\r\n\r\n    // Only update from props if we're supplying the props in the first place\r\n    if (nextPanels.length) {\r\n      // if the panel array is a different size we know to update\r\n      if (this.state.panels.length !== nextPanels.length) {\r\n        this.setState(this.loadPanels(nextProps));\r\n      } else {\r\n        // otherwise we need to iterate to spot any difference\r\n        for (let i = 0; i < nextPanels.length; i++) {\r\n          if (\r\n            this.state.panels[i].size !== nextPanels[i].size ||\r\n            this.state.panels[i].minSize !== nextPanels[i].minSize ||\r\n            this.state.panels[i].maxSize !== nextPanels[i].maxSize ||\r\n            this.state.panels[i].resize !== nextPanels[i].resize\r\n          ) {\r\n            this.setState(this.loadPanels(nextProps));\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  defaultResize = (props, index, defaultResize) => {\r\n    let resize = defaultResize;\r\n    if (props.panelWidths[index].resize) {\r\n      resize = props.panelWidths[index].resize; // eslint-disable-line\r\n    } else {\r\n      resize = props.panelWidths[index].size ? 'dynamic' : resize;\r\n    }\r\n    return resize;\r\n  };\r\n  // load provided props into state\r\n  loadPanels = (props) => {\r\n    const panels = [];\r\n\r\n    if (props.children) {\r\n      // Default values if none were provided\r\n      const defaultSize = 256;\r\n      const defaultMinSize = 48;\r\n      const defaultMaxSize = 0;\r\n      const defaultResize = 'stretch';\r\n\r\n      let stretchIncluded = false;\r\n      const children = React.Children.toArray(props.children);\r\n\r\n      for (let i = 0; i < children.length; i++) {\r\n        if (i < props.panelWidths.length && props.panelWidths[i]) {\r\n          const widthObj = {\r\n            size: props.panelWidths[i].size !== undefined ? props.panelWidths[i].size : defaultSize,\r\n            minSize:\r\n              props.panelWidths[i].minSize !== undefined\r\n                ? props.panelWidths[i].minSize\r\n                : defaultMinSize,\r\n            maxSize:\r\n              props.panelWidths[i].maxSize !== undefined\r\n                ? props.panelWidths[i].maxSize\r\n                : defaultMaxSize,\r\n            resize: this.defaultResize(props, i, defaultResize),\r\n            snap: props.panelWidths[i].snap !== undefined ? props.panelWidths[i].snap : [],\r\n            style: {\r\n              // making the ability to not have to be so terse for style settings on panel\r\n              ...this.getPanelClass().defaultProps.style,\r\n              ...(props.panelWidths[i].style || {})\r\n            }\r\n          };\r\n          panels.push(widthObj);\r\n        } else {\r\n          // default values if no props are given\r\n          panels.push({\r\n            size: defaultSize,\r\n            resize: defaultResize,\r\n            minSize: defaultMinSize,\r\n            maxSize: defaultMaxSize,\r\n            snap: [],\r\n            style: {}\r\n          });\r\n        }\r\n\r\n        // if none of the panels included was stretchy, make the last one stretchy\r\n        if (panels[i].resize === 'stretch') stretchIncluded = true;\r\n        if (!stretchIncluded && i === children.length - 1) panels[i].resize = 'stretch';\r\n      }\r\n    }\r\n\r\n    return {\r\n      panels\r\n    };\r\n  };\r\n\r\n  // Pass internal state out if there's a callback for it\r\n  // Useful for saving panel configuration\r\n  onUpdate = (panels) => {\r\n    if (this.props.onUpdate) {\r\n      this.props.onUpdate(panels.slice());\r\n    }\r\n  };\r\n\r\n  onResizeStart = () => {\r\n    if (this.props.onResizeStart) {\r\n      // actually this slice clones only array, underlying objects stays the same\r\n      this.props.onResizeStart(this.state.panels.slice());\r\n    }\r\n  };\r\n\r\n  onResizeEnd = () => {\r\n    if (this.props.onResizeEnd) {\r\n      this.props.onResizeEnd(this.state.panels.slice());\r\n    }\r\n  };\r\n\r\n  // For styling, track which direction to apply sizing to\r\n  getSizeDirection = (caps) => {\r\n    if (caps) {\r\n      return this.props.direction === 'column' ? 'Height' : 'Width';\r\n    }\r\n    return this.props.direction === 'column' ? 'height' : 'width';\r\n  };\r\n\r\n  getStyle() {\r\n    const container = {\r\n      width: '100%',\r\n      height: '100%',\r\n      [`min${this.getSizeDirection(true)}`]: this.getPanelGroupMinSize(this.props.spacing),\r\n      display: 'flex',\r\n      flexDirection: this.props.direction,\r\n      flexGrow: 1\r\n    };\r\n\r\n    return {\r\n      container,\r\n      panel: {\r\n        flexGrow: 0,\r\n        display: 'flex'\r\n      }\r\n    };\r\n  }\r\n\r\n  getPanelStyle(index) {\r\n    const { direction, panelColor } = this.props;\r\n\r\n    const panel = this.state.panels[index];\r\n    const { style } = panel;\r\n\r\n    // setting up the style for this panel.  Should probably be handled\r\n    // in the child component, but this was easier for now\r\n    let newPanelStyle = {\r\n      [this.getSizeDirection()]: panel.size,\r\n      [direction === 'row' ? 'height' : 'width']: '100%',\r\n      [`min${this.getSizeDirection(true)}`]: panel.resize === 'stretch' ? 0 : panel.size,\r\n\r\n      flexGrow: panel.resize === 'stretch' ? 1 : 0,\r\n      flexShrink: panel.resize === 'stretch' ? 1 : 0,\r\n      display: 'flex',\r\n      overflow: 'hidden',\r\n      position: 'relative',\r\n      ...style\r\n    };\r\n    if (panelColor !== null) {\r\n      // patch in the background color if it was supplied as a prop\r\n      newPanelStyle = {\r\n        ...newPanelStyle,\r\n        backgroundColor: panelColor\r\n      };\r\n    }\r\n\r\n    return newPanelStyle;\r\n  }\r\n\r\n  createPanelProps({ panelStyle, index, initialChildren }) {\r\n    const panelState = this.state.panels[index];\r\n    let stretchIncluded = false;\r\n    // give position info to children\r\n    const metadata = {\r\n      isFirst: index === 0,\r\n      isLast: index === initialChildren.length - 1,\r\n      resize: panelState.resize,\r\n\r\n      // window resize handler if this panel is stretchy\r\n      onWindowResize: panelState.resize === 'stretch' ? this.setPanelSize : null\r\n    };\r\n\r\n    // if none of the panels included was stretchy, make the last one stretchy\r\n    if (panelState.resize === 'stretch') stretchIncluded = true;\r\n    if (!stretchIncluded && metadata.isLast) metadata.resize = 'stretch';\r\n\r\n    return {\r\n      style: panelStyle,\r\n      key: index,\r\n      panelID: index,\r\n      ...metadata\r\n    };\r\n  }\r\n\r\n  createPanel({ panelStyle, index, initialChildren }) {\r\n    const Klass = this.getPanelClass();\r\n    return (\r\n      <Klass {...this.createPanelProps({ panelStyle, index, initialChildren })}>\r\n        {initialChildren[index]}\r\n      </Klass>\r\n    );\r\n  }\r\n  // eslint-disable-next-line class-methods-use-this\r\n  getPanelClass() {\r\n    // mainly for accessing default props of panels\r\n    return Panel;\r\n  }\r\n\r\n  maybeDivide({ initialChildren, newChildren, index }) {\r\n    // add a handle between panels\r\n    if (index < initialChildren.length - 1) {\r\n      newChildren.push(\r\n        <Divider\r\n          borderColor={this.props.borderColor}\r\n          key={`divider${index}`}\r\n          panelID={index}\r\n          handleResize={this.handleResize}\r\n          dividerWidth={this.props.spacing}\r\n          direction={this.props.direction}\r\n          showHandles={this.props.showHandles}\r\n          onResizeStart={this.onResizeStart}\r\n          onResizeEnd={this.onResizeEnd}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  // Entry point for resizing panels.\r\n  // We clone the panel array and perform operations on it so we can\r\n  // setState after the recursive operations are finished\r\n  handleResize = (i, delta) => {\r\n    const tempPanels = this.state.panels.slice();\r\n    const returnDelta = this.resizePanel(\r\n      i,\r\n      this.props.direction === 'row' ? delta.x : delta.y,\r\n      tempPanels\r\n    );\r\n    this.setState({ panels: tempPanels });\r\n    this.onUpdate(tempPanels);\r\n    return returnDelta;\r\n  };\r\n\r\n  // Recursive panel resizing so we can push other panels out of the way\r\n  // if we've exceeded the target panel's extents\r\n  resizePanel = (panelIndex, delta, panels) => {\r\n    // 1) first let's calculate and make sure all the sizes add up to be correct.\r\n    let masterSize = 0;\r\n    for (let iti = 0; iti < panels.length; iti += 1) {\r\n      masterSize += panels[iti].size;\r\n    }\r\n    const boundingRect = this.node.getBoundingClientRect();\r\n    const boundingSize =\r\n      (this.props.direction === 'column' ? boundingRect.height : boundingRect.width) -\r\n      this.props.spacing * (this.props.children.length - 1);\r\n    if (Math.abs(boundingSize - masterSize) <= 0.01) {\r\n      // Debug log\r\n      // console.log({ panels }, `ERROR! SIZES DON'T MATCH!: ${masterSize}, ${boundingSize}`)\r\n\r\n      // 2) Rectify the situation by adding all the unacounted for space to the first panel\r\n      panels[panelIndex].size += boundingSize - masterSize;\r\n    }\r\n\r\n    let minsize;\r\n    let maxsize;\r\n\r\n    // track the progressive delta so we can report back how much this panel\r\n    // actually moved after all the adjustments have been made\r\n    let resultDelta = delta;\r\n\r\n    // make the changes and deal with the consequences later\r\n    panels[panelIndex].size += delta;\r\n    panels[panelIndex + 1].size -= delta;\r\n\r\n    // Min and max for LEFT panel\r\n    minsize = this.getPanelMinSize(panelIndex, panels);\r\n    maxsize = this.getPanelMaxSize(panelIndex, panels);\r\n\r\n    // if we made the left panel too small\r\n    if (panels[panelIndex].size < minsize) {\r\n      delta = minsize - panels[panelIndex].size;\r\n\r\n      if (panelIndex === 0) {\r\n        resultDelta = this.resizePanel(panelIndex, delta, panels);\r\n      } else {\r\n        resultDelta = this.resizePanel(panelIndex - 1, -delta, panels);\r\n      }\r\n    }\r\n\r\n    // if we made the left panel too big\r\n    if (maxsize !== 0 && panels[panelIndex].size > maxsize) {\r\n      delta = panels[panelIndex].size - maxsize;\r\n\r\n      if (panelIndex === 0) {\r\n        resultDelta = this.resizePanel(panelIndex, -delta, panels);\r\n      } else {\r\n        resultDelta = this.resizePanel(panelIndex - 1, delta, panels);\r\n      }\r\n    }\r\n\r\n    // Min and max for RIGHT panel\r\n    minsize = this.getPanelMinSize(panelIndex + 1, panels);\r\n    maxsize = this.getPanelMaxSize(panelIndex + 1, panels);\r\n\r\n    // if we made the right panel too small\r\n    if (panels[panelIndex + 1].size < minsize) {\r\n      delta = minsize - panels[panelIndex + 1].size;\r\n\r\n      if (panelIndex + 1 === panels.length - 1) {\r\n        resultDelta = this.resizePanel(panelIndex, -delta, panels);\r\n      } else {\r\n        resultDelta = this.resizePanel(panelIndex + 1, delta, panels);\r\n      }\r\n    }\r\n\r\n    // if we made the right panel too big\r\n    if (maxsize !== 0 && panels[panelIndex + 1].size > maxsize) {\r\n      delta = panels[panelIndex + 1].size - maxsize;\r\n\r\n      if (panelIndex + 1 === panels.length - 1) {\r\n        resultDelta = this.resizePanel(panelIndex, delta, panels);\r\n      } else {\r\n        resultDelta = this.resizePanel(panelIndex + 1, -delta, panels);\r\n      }\r\n    }\r\n\r\n    // Iterate through left panel's snap positions\r\n    for (let i = 0; i < panels[panelIndex].snap.length; i++) {\r\n      if (Math.abs(panels[panelIndex].snap[i] - panels[panelIndex].size) < 20) {\r\n        delta = panels[panelIndex].snap[i] - panels[panelIndex].size;\r\n\r\n        if (\r\n          delta !== 0 &&\r\n          panels[panelIndex].size + delta >= this.getPanelMinSize(panelIndex, panels) &&\r\n          panels[panelIndex + 1].size - delta >= this.getPanelMinSize(panelIndex + 1, panels)\r\n        ) {\r\n          resultDelta = this.resizePanel(panelIndex, delta, panels);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Iterate through right panel's snap positions\r\n    for (let i = 0; i < panels[panelIndex + 1].snap.length; i++) {\r\n      if (Math.abs(panels[panelIndex + 1].snap[i] - panels[panelIndex + 1].size) < 20) {\r\n        delta = panels[panelIndex + 1].snap[i] - panels[panelIndex + 1].size;\r\n\r\n        if (\r\n          delta !== 0 &&\r\n          panels[panelIndex].size + delta >= this.getPanelMinSize(panelIndex, panels) &&\r\n          panels[panelIndex + 1].size - delta >= this.getPanelMinSize(panelIndex + 1, panels)\r\n        ) {\r\n          resultDelta = this.resizePanel(panelIndex, -delta, panels);\r\n        }\r\n      }\r\n    }\r\n\r\n    // return how much this panel actually resized\r\n    return resultDelta;\r\n  };\r\n\r\n  // Utility function for getting min pixel size of panel\r\n  getPanelMinSize = (panelIndex, panels) => {\r\n    if (panels[panelIndex].resize === 'fixed') {\r\n      if (!panels[panelIndex].fixedSize) {\r\n        panels[panelIndex].fixedSize = panels[panelIndex].size;\r\n      }\r\n      return panels[panelIndex].fixedSize;\r\n    }\r\n    return panels[panelIndex].minSize;\r\n  };\r\n\r\n  // Utility function for getting max pixel size of panel\r\n  getPanelMaxSize = (panelIndex, panels) => {\r\n    if (panels[panelIndex].resize === 'fixed') {\r\n      if (!panels[panelIndex].fixedSize) {\r\n        panels[panelIndex].fixedSize = panels[panelIndex].size;\r\n      }\r\n      return panels[panelIndex].fixedSize;\r\n    }\r\n    return panels[panelIndex].maxSize;\r\n    // return 0;\r\n  };\r\n\r\n  // Utility function for getting min pixel size of the entire panel group\r\n  getPanelGroupMinSize = (spacing) => {\r\n    let size = 0;\r\n    for (let i = 0; i < this.state.panels.length; i++) {\r\n      size += this.getPanelMinSize(i, this.state.panels);\r\n    }\r\n    return size + (this.state.panels.length - 1) * spacing;\r\n  };\r\n\r\n  // Utility function for getting max pixel size of the entire panel group\r\n  getPanelGroupMaxSize = (spacing) => {\r\n    let size = 0;\r\n    for (let i = 0; i < this.state.panels.length; i++) {\r\n      size += this.getPanelMaxSize(i, this.state.panels);\r\n    }\r\n    return size + (this.state.panels.length - 1) * spacing;\r\n  };\r\n\r\n  // Hard-set a panel's size\r\n  // Used to recalculate a stretchy panel when the window is resized\r\n  setPanelSize = (panelIndex, size, callback, node) => {\r\n    if (!this.node && node) {\r\n      // due to timing child elements may have parent node first!\r\n      this.node = node;\r\n    }\r\n    size = this.props.direction === 'column' ? size.y : size.x;\r\n    if (size !== this.state.panels[panelIndex].size) {\r\n      const tempPanels = this.state.panels.map(panel => ({ ...panel }));\r\n\r\n      // make sure we can actually resize this panel this small\r\n      if (size < tempPanels[panelIndex].minSize) {\r\n        let diff = tempPanels[panelIndex].minSize - size;\r\n        tempPanels[panelIndex].size = tempPanels[panelIndex].minSize;\r\n\r\n        // 1) Find all of the dynamic panels that we can resize and\r\n        // decrease them until the difference is gone\r\n        for (let i = 0; i < tempPanels.length; i += 1) {\r\n          if (i !== panelIndex && tempPanels[i].resize === 'dynamic') {\r\n            const available = tempPanels[i].size - tempPanels[i].minSize;\r\n            const cut = Math.min(diff, available);\r\n            tempPanels[i].size -= cut;\r\n            // if the difference is gone then we are done!\r\n            diff -= cut;\r\n            if (diff === 0) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        tempPanels[panelIndex].size = size;\r\n      }\r\n      this.setState({ panels: tempPanels });\r\n      this.onUpdate(tempPanels);\r\n\r\n      if (panelIndex > 0) {\r\n        this.handleResize(panelIndex - 1, { x: 0, y: 0 });\r\n      } else if (this.state.panels.length > 2) {\r\n        this.handleResize(panelIndex + 1, { x: 0, y: 0 });\r\n      }\r\n\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    const style = this.getStyle();\r\n\r\n    // lets build up a new children array with added resize borders\r\n    const initialChildren = React.Children.toArray(children);\r\n    const newChildren = [];\r\n\r\n    for (let i = 0; i < initialChildren.length; i++) {\r\n      const panelStyle = this.getPanelStyle(i);\r\n      const newPanel = this.createPanel({ panelStyle, index: i, initialChildren });\r\n      newChildren.push(newPanel);\r\n      this.maybeDivide({ initialChildren, newChildren, index: i });\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className=\"panelGroup\"\r\n        style={style.container}\r\n        ref={(node) => {\r\n          this.node = node;\r\n        }}\r\n      >\r\n        {newChildren}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import PanelGroup from './PanelGroup';\r\n\r\nexport { default as Panel } from './Panel';\r\nexport { default as Divider } from './Divider';\r\nexport default PanelGroup;\r\n// ultimatley created this file due to\r\n// https://github.com/insin/nwb/issues/449\r\n"],"sourceRoot":""}